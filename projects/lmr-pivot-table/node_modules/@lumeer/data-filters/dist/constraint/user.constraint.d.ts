import { UserDataValue } from '../data-value';
import { Constraint } from './constraint';
import { ConditionType, UserConstraintConfig, ConstraintType } from '../model';
import { ConstraintData } from './constraint-data';
export declare class UserConstraint implements Constraint {
    readonly config: UserConstraintConfig;
    readonly type = ConstraintType.User;
    readonly allowEditFunction = true;
    constructor(config: UserConstraintConfig);
    createDataValue(value: any, constraintData: ConstraintData): UserDataValue;
    createInputDataValue(inputValue: string, value: any, constraintData: ConstraintData): UserDataValue;
    conditions(): ConditionType[];
    avg(values: any[], onlyNumeric?: boolean): any;
    max(values: any[], onlyNumeric?: boolean): any;
    median(values: any[], onlyNumeric?: boolean): any;
    min(values: any[], onlyNumeric?: boolean): any;
    sum(values: any[], onlyNumeric?: boolean): any;
    unique(values: any[]): any;
    count(values: any[]): number;
    filterInvalidValues<T extends {
        data: Record<string, any>;
    }>(objects: T[], attributeId: string, constraintData: ConstraintData): Set<any>;
}
