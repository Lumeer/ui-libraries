import { ConstraintData } from '../constraint';
import { DataValue } from './data-value';
import { ConditionType, ConditionValue, Team, TeamConstraintConfig } from '../model';
export declare class TeamDataValue implements DataValue {
    readonly value: any;
    readonly config: TeamConstraintConfig;
    readonly constraintData: ConstraintData;
    readonly inputValue?: string;
    readonly teams: Team[];
    constructor(value: any, config: TeamConstraintConfig, constraintData: ConstraintData, inputValue?: string);
    private createTeams;
    format(): string;
    preview(): string;
    title(): string;
    editValue(): string;
    serialize(): any;
    isValid(ignoreConfig?: boolean): boolean;
    private isTeamValid;
    increment(): TeamDataValue;
    decrement(): TeamDataValue;
    compareTo(otherValue: TeamDataValue): number;
    copy(newValue?: any): TeamDataValue;
    parseInput(inputValue: string): TeamDataValue;
    meetCondition(condition: ConditionType, values: ConditionValue[]): boolean;
    private mapQueryConditionValue;
    meetFullTexts(fulltexts: string[]): boolean;
    valueByCondition(condition: ConditionType, values: ConditionValue[]): any;
}
