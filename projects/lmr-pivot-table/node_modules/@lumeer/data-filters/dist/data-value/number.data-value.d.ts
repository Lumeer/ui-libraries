import Big from 'big.js';
import { NumericDataValue } from './data-value';
import { ConditionType, ConditionValue, NumberConstraintConfig } from '../model';
import { ConstraintData } from '../constraint';
export declare class NumberDataValue implements NumericDataValue {
    readonly value: any;
    readonly config: NumberConstraintConfig;
    readonly constraintData?: ConstraintData;
    readonly inputValue?: string;
    readonly number: Big;
    private readonly roundedNumber;
    private readonly locale;
    private readonly parsedValue;
    constructor(value: any, config: NumberConstraintConfig, constraintData?: ConstraintData, inputValue?: string);
    private parseValue;
    format(overrideConfig?: Partial<NumberConstraintConfig>): string;
    private formatBigNumber;
    preview(overrideConfig?: Partial<NumberConstraintConfig>): string;
    title(overrideConfig?: Partial<NumberConstraintConfig>): string;
    editValue(): string;
    private getCurrencyDecimalSeparator;
    serialize(): any;
    isValid(ignoreConfig?: boolean): boolean;
    increment(): NumberDataValue;
    decrement(): NumberDataValue;
    compareTo(otherValue: NumberDataValue): number;
    copy(newValue?: any): NumberDataValue;
    parseInput(inputValue: string): NumberDataValue;
    meetCondition(condition: ConditionType, values: ConditionValue[]): boolean;
    meetFullTexts(fulltexts: string[]): boolean;
    valueByCondition(condition: ConditionType, values: ConditionValue[]): any;
}
