import Big from 'big.js';
import { NumericDataValue } from './data-value';
import { ConditionType, ConditionValue, PercentageConstraintConfig } from '../model';
export declare class PercentageDataValue implements NumericDataValue {
    readonly value: any;
    readonly config: PercentageConstraintConfig;
    readonly inputValue?: string;
    readonly number: Big;
    private readonly roundedNumber;
    private readonly parsedValue;
    constructor(value: any, config: PercentageConstraintConfig, inputValue?: string);
    format(overrideConfig?: Partial<PercentageConstraintConfig>, suffix?: string): string;
    preview(overrideConfig?: Partial<PercentageConstraintConfig>): string;
    title(overrideConfig?: Partial<PercentageConstraintConfig>): string;
    editValue(): string;
    serialize(): any;
    isValid(ignoreConfig?: boolean): boolean;
    private isPercentageWithinRange;
    increment(): PercentageDataValue;
    decrement(): PercentageDataValue;
    compareTo(otherValue: PercentageDataValue): number;
    copy(newValue?: any): PercentageDataValue;
    parseInput(inputValue: string): PercentageDataValue;
    meetCondition(condition: ConditionType, values: ConditionValue[]): boolean;
    meetFullTexts(fulltexts: string[]): boolean;
    valueByCondition(condition: ConditionType, values: ConditionValue[]): any;
}
