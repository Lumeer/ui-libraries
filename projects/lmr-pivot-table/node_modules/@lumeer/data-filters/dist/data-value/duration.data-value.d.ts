import Big from 'big.js';
import { NumericDataValue } from './data-value';
import { ConditionType, ConditionValue, DurationConstraintConfig, DurationUnit } from '../model';
import { ConstraintData } from '../constraint';
export declare class DurationDataValue implements NumericDataValue {
    readonly value: any;
    readonly config: DurationConstraintConfig;
    readonly constraintData: ConstraintData;
    readonly inputValue?: string;
    readonly number: Big;
    readonly unitsCountMap: Record<DurationUnit, number>;
    private readonly roundedNumber;
    private readonly parsedValue;
    constructor(value: any, config: DurationConstraintConfig, constraintData: ConstraintData, inputValue?: string);
    format(overrideConfig?: Partial<DurationConstraintConfig>): string;
    private formatToNativeLocale;
    private formatWithUnitsMap;
    preview(overrideConfig?: Partial<DurationConstraintConfig>): string;
    title(overrideConfig?: Partial<DurationConstraintConfig>): string;
    editValue(): string;
    serialize(): any;
    isValid(ignoreConfig?: boolean): boolean;
    increment(): DurationDataValue;
    private addToSmallestUnit;
    decrement(): DurationDataValue;
    compareTo(otherValue: DurationDataValue): number;
    copy(newValue?: any): DurationDataValue;
    parseInput(inputValue: string): DurationDataValue;
    meetCondition(condition: ConditionType, values: ConditionValue[]): boolean;
    meetFullTexts(fulltexts: string[]): boolean;
    valueByCondition(condition: ConditionType, values: ConditionValue[]): any;
}
