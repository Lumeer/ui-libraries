import { AllowedPermissions, Attribute, AttributeFilter, AttributesResource, Collection, DataResource, DocumentModel, LinkInstance, LinkType, Query, QueryStem, AttributeLock, AttributeLockExceptionGroup, AttributeFilterEquation } from '../model';
import { ConstraintData } from '../constraint';
import { DataValue } from '../data-value';
interface FilteredDataResources {
    allDocuments: DocumentModel[];
    pipelineDocuments: DocumentModel[][];
    allLinkInstances: LinkInstance[];
    pipelineLinkInstances: LinkInstance[][];
}
export declare function filterDocumentsAndLinksIdsFromJson(json: string): {
    documentsIds: string[];
    linkInstancesIds: string[];
};
export declare function filterDocumentsAndLinksByQuery(documents: DocumentModel[], collections: Collection[], linkTypes: LinkType[], linkInstances: LinkInstance[], query: Query, collectionsPermissions: Record<string, AllowedPermissions>, linkTypePermissions: Record<string, AllowedPermissions>, constraintData: ConstraintData, includeChildren?: boolean, includeNonLinkedDocuments?: boolean): {
    documents: DocumentModel[];
    linkInstances: LinkInstance[];
};
export interface DocumentsAndLinksData {
    uniqueDocuments: DocumentModel[];
    uniqueLinkInstances: LinkInstance[];
    dataByStems?: DocumentsAndLinksStemData[];
}
export interface DocumentsAndLinksStemData {
    stem: QueryStem;
    documents: DocumentModel[];
    linkInstances: LinkInstance[];
}
export declare function filterDocumentsAndLinksDataByQuery(documents: DocumentModel[], collections: Collection[], linkTypes: LinkType[], linkInstances: LinkInstance[], query: Query, collectionsPermissions: Record<string, AllowedPermissions>, linkTypePermissions: Record<string, AllowedPermissions>, constraintData: ConstraintData, includeChildren?: boolean, includeNonLinkedDocuments?: boolean): DocumentsAndLinksData;
export declare function filterDocumentsAndLinksByStem(collections: Collection[], documentsByCollections: Record<string, DocumentModel[]>, linkTypes: LinkType[], linkInstancesByLinkTypes: Record<string, LinkInstance[]>, collectionsPermissions: Record<string, AllowedPermissions>, linkTypePermissions: Record<string, AllowedPermissions>, constraintData: ConstraintData, stem: QueryStem, fulltexts?: string[], includeChildren?: boolean, includeNonLinkedDocuments?: boolean): FilteredDataResources;
export declare function someDocumentMeetFulltexts(documents: DocumentModel[], collection: Collection, fulltexts: string[], constraintData: ConstraintData): boolean;
export declare function createDataValuesMap(data: Record<string, any>, attributes: Attribute[], constraintData: ConstraintData): Record<string, DataValue>;
export interface AttributeLockFiltersStats {
    satisfy?: boolean;
    groups?: AttributeLockFiltersStatsGroup[];
}
export interface AttributeLockFiltersStatsGroup {
    exceptionGroup?: AttributeLockExceptionGroup;
    filtersStats: AttributeLockFilterStats[];
    satisfy: boolean;
}
export interface AttributeLockFilterStats {
    satisfy?: boolean;
    filter?: AttributeFilter;
}
export declare function computeAttributeLockStats(dataResource: DataResource, resource: AttributesResource, lock: AttributeLock, constraintData?: ConstraintData): AttributeLockFiltersStats;
export declare function computeAttributeLockStatsByDataValues(dataValues: Record<string, DataValue>, attributesMap: Record<string, Attribute>, lock: AttributeLock, constraintData?: ConstraintData): AttributeLockFiltersStats;
export declare function dataValuesSatisfyEquation(dataValues: Record<string, DataValue>, attributesMap: Record<string, Attribute>, equation: AttributeFilterEquation, constraintData?: ConstraintData): boolean;
export declare function isActionButtonEnabled(dataValues: Record<string, DataValue>, attributesMap: Record<string, Attribute>, lock: AttributeLock, constraintData?: ConstraintData): boolean;
export {};
