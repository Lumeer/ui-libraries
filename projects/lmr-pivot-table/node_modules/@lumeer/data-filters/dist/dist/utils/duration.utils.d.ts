import { DurationUnitsMap } from '../constraint';
import { DurationConstraintConfig, DurationType, DurationUnit } from '../model';
export declare const sortedDurationUnits: DurationUnit[];
export declare function durationConstraintUnitMaxValue(unit: DurationUnit): number;
export declare function getDefaultDurationUnitConversion(type: DurationType, unit: DurationUnit): number;
export declare function getDurationSaveValue(value: any, config: DurationConstraintConfig, durationUnitsMap: DurationUnitsMap): any;
export declare function getDurationUnitToMillisMap(config: DurationConstraintConfig, durationUnitsMap?: DurationUnitsMap): Record<string, number>;
export declare function getPreviousDurationUnit(unit: DurationUnit): DurationUnit | null;
export declare function isDurationDataValueValid(value: any, durationUnitsMap: DurationUnitsMap, allowNegativeNumber?: boolean): any;
export declare function formatDurationDataValue(value: any, config: DurationConstraintConfig, durationUnitsMap: DurationUnitsMap, overrideConfig?: Partial<DurationConstraintConfig>): string;
export declare function emptyDurationUnitsCountsMap(): Record<DurationUnit | string, number>;
export declare function createDurationUnitsCountsMap(saveValue: any, config: DurationConstraintConfig, overrideConfig?: Partial<DurationConstraintConfig>): Record<DurationUnit | string, number>;
export declare function durationCountsMapToString(durationCountsMap: Record<DurationUnit, number>, decimalPlaces?: number, durationUnitsMap?: DurationUnitsMap): string;
