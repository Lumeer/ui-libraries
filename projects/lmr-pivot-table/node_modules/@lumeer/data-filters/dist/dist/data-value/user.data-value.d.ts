import { ConstraintData } from '../constraint';
import { DataValue } from './data-value';
import { ConditionType, ConditionValue, Team, User, UserConstraintConfig } from '../model';
export declare class UserDataValue implements DataValue {
    readonly value: any;
    readonly config: UserConstraintConfig;
    readonly constraintData: ConstraintData;
    readonly inputValue?: string;
    readonly users: User[];
    readonly usersIds: string[];
    readonly teams: Team[];
    readonly teamsIds: string[];
    readonly teamsUsersIds: string[];
    readonly allUsersIds: string[];
    readonly usersTeamsIds: string[];
    readonly allTeamsIds: string[];
    constructor(value: any, config: UserConstraintConfig, constraintData: ConstraintData, inputValue?: string);
    private userTeamsIds;
    private createUsersAndTeams;
    format(preferEmail?: boolean): string;
    preview(): string;
    title(): string;
    editValue(): string;
    serialize(): any;
    isValid(ignoreConfig?: boolean): boolean;
    private isUserValid;
    increment(): UserDataValue;
    decrement(): UserDataValue;
    compareTo(otherValue: UserDataValue): number;
    copy(newValue?: any): UserDataValue;
    parseInput(inputValue: string): UserDataValue;
    meetCondition(condition: ConditionType, values: ConditionValue[]): boolean;
    private mapQueryConditionValue;
    meetFullTexts(fulltexts: string[]): boolean;
    valueByCondition(condition: ConditionType, values: ConditionValue[]): any;
}
export declare function userDataValueIsTeamValue(value: string): boolean;
export declare function userDataValueCreateTeamValue(teamId: string): string;
export declare function userDataValueParseTeamValue(value: string): string;
