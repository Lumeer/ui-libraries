import { DataValue } from './data-value';
import { Address, AddressConstraintConfig } from '../model';
import { ConditionType, ConditionValue } from '../model';
import { ConstraintData } from '../constraint';
export declare class AddressDataValue implements DataValue {
    readonly value: any;
    readonly config: AddressConstraintConfig;
    readonly constraintData: ConstraintData;
    readonly inputValue?: string;
    readonly address: Address;
    constructor(value: any, config: AddressConstraintConfig, constraintData: ConstraintData, inputValue?: string);
    format(): string;
    preview(): string;
    title(): string;
    editValue(): string;
    serialize(): any;
    isValid(ignoreConfig?: boolean): boolean;
    increment(): AddressDataValue;
    decrement(): AddressDataValue;
    compareTo(otherValue: AddressDataValue): number;
    copy(newValue?: any): AddressDataValue;
    parseInput(inputValue: string): AddressDataValue;
    meetCondition(condition: ConditionType, values: ConditionValue[]): boolean;
    meetFullTexts(fulltexts: string[]): boolean;
    valueByCondition(condition: ConditionType, values: ConditionValue[]): any;
}
