import moment from 'moment';
import { DataValue } from './data-value';
import { DateTimeConstraintConfig, ConditionType, ConditionValue } from '../model';
import { ConstraintData } from '../constraint';
export declare class DateTimeDataValue implements DataValue {
    readonly value: any;
    readonly config: DateTimeConstraintConfig;
    readonly constraintData?: ConstraintData;
    readonly inputValue?: string;
    readonly momentDate: moment.Moment;
    isUtc: boolean;
    private readonly locale;
    constructor(value: any, config: DateTimeConstraintConfig, constraintData?: ConstraintData, inputValue?: string);
    private isUtcDate;
    private parseMoment;
    serialize(): any;
    preview(): string;
    format(showInvalid?: boolean): string;
    title(): string;
    editValue(): string;
    isValid(ignoreConfig?: boolean): boolean;
    private isValidMomentDate;
    private isWithinRange;
    increment(): DateTimeDataValue;
    decrement(): DateTimeDataValue;
    compareTo(otherValue: DateTimeDataValue): number;
    copy(newValue?: any): DateTimeDataValue;
    toDate(): Date;
    parseInput(inputValue: string): DateTimeDataValue;
    meetCondition(condition: ConditionType, values: ConditionValue[]): boolean;
    private mapConditionValues;
    private compareMoments;
    meetFullTexts(fulltexts: string[]): boolean;
    valueByCondition(condition: ConditionType, values: ConditionValue[]): any;
}
