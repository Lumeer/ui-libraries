import { DataAggregatorAttribute, DataResourceChain } from './data-aggregator';
import { AllowedPermissions, AttributesResource, Collection, DataResource, DocumentModel, LinkInstance, LinkType, QueryAttribute, QueryStem, ResourcesPermissions } from '../model';
import { Constraint, ConstraintData } from '../constraint';
export interface DataObjectInfo<T> {
    objectDataResources: Record<DataObjectInfoKey, DataResource>;
    metaDataResources: Record<DataObjectInfoKey, DataResource[]>;
    dataResourcesChain: DataResourceChain[];
    groupingDataResources: DataResource[];
    groupingObjects: T[];
}
export type DataObjectInfoKey = string;
export interface DataObjectAttribute extends QueryAttribute {
    key?: DataObjectInfoKey;
}
export interface DataObjectInput<T> {
    groupingAttributes: DataObjectAttribute[];
    objectAttributes: DataObjectAttribute[];
    metaAttributes: DataObjectAttribute[];
    objectsConverter?: (value: any, attribute: DataObjectAttribute) => T;
}
export declare class DataObjectAggregator<T> {
    private formatValue?;
    private collectionsMap;
    private linkTypesMap;
    private permissions;
    private query;
    private constraintData;
    private dataAggregator;
    constructor(formatValue?: (value: any, constraint: Constraint, data: ConstraintData, aggregatorAttribute: DataAggregatorAttribute) => any);
    updateData(collections: Collection[], documents: DocumentModel[], linkTypes: LinkType[], linkInstances: LinkInstance[], queryStem: QueryStem, permissions: ResourcesPermissions, constraintData?: ConstraintData): void;
    convert(input: DataObjectInput<T>, uniqueObjects?: boolean): DataObjectInfo<T>[];
    private fillByAggregationRecursive;
    private fillDataObjectInfo;
    private fillDataObjectInfoMeta;
    getDataResources(attribute: QueryAttribute): DataResource[];
    getNextCollectionResource(index: number): AttributesResource;
    getPreviousCollectionResource(index: number): AttributesResource;
    getResource(model: QueryAttribute): AttributesResource;
    isAttributeEditable(model: QueryAttribute, dataResource: DataResource): boolean;
    attributePermissions(model: QueryAttribute): AllowedPermissions;
    getAttributeResourceColor(model: QueryAttribute): string;
    getAttributeColor(model: QueryAttribute, dataResources: DataResource[]): string;
    getAttributeIcons(model: QueryAttribute): string[];
    private parseColor;
    findAttributeConstraint(model: QueryAttribute): Constraint;
    private convertQueryAttribute;
}
