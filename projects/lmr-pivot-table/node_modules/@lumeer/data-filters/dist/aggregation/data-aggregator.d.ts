import { AttributesResource, AttributesResourceType, Collection, DataResource, DocumentModel, LinkInstance, LinkType, QueryStem } from '../model';
import { Constraint, ConstraintData } from '../constraint';
export interface AggregatedMapData {
    map: AggregatedDataMap;
    columnsMap: Record<string, any>;
    rowLevels: number;
    columnLevels: number;
}
export interface AggregatedArrayData {
    items: AggregatedDataItem[];
    levels: number;
}
export interface AggregatedDataItem {
    value: any;
    dataResources: DataResource[];
    dataResourcesChains: DataResourceChain[][];
    children?: AggregatedDataItem[];
    values?: AggregatedDataValues[];
}
export interface DataResourceChain {
    documentId?: string;
    linkInstanceId?: string;
}
export type AggregatedDataMap = Record<string, any | AggregatedDataValues[]>;
export interface AggregatedDataValues {
    resourceId: string;
    type: AttributesResourceType;
    objects: DataResource[];
}
export interface DataAggregatorAttribute {
    attributeId: string;
    resourceIndex: number;
    data?: any;
    unique?: boolean;
}
export declare class DataAggregator {
    private formatValue?;
    private constraintData;
    private attributesResourcesOrder;
    private dataMap;
    constructor(formatValue?: (value: any, constraint: Constraint, data: ConstraintData, aggregatorAttribute: DataAggregatorAttribute) => any);
    updateData(collections: Collection[], documents: DocumentModel[], linkTypes: LinkType[], linkInstances: LinkInstance[], queryStem: QueryStem, constraintData?: ConstraintData): void;
    getDataResources(index: number): DataResource[];
    getResource(index: number): AttributesResource;
    getNextCollectionResource(index: number): AttributesResource;
    getPreviousCollectionResource(index: number): AttributesResource;
    aggregate(rowAttributes: DataAggregatorAttribute[], columnAttributes: DataAggregatorAttribute[], valueAttributes: DataAggregatorAttribute[]): AggregatedMapData;
    aggregateArray(attributes: DataAggregatorAttribute[], valueAttributes: DataAggregatorAttribute[]): AggregatedArrayData;
    private aggregateByArray;
    private aggregateByRowsAndColumns;
    private createColumnsMap;
    private iterateThroughColumnMap;
    private createAttributesResourceChain;
    private createValueAttributeChain;
    private createRowOrColumnAttributesChain;
    private createAttributesResourceChainForRange;
    private attributesResourceTypeForIndex;
    private iterate;
    private iterateRecursive;
    private processLastStage;
    private iterateArray;
    private iterateRecursiveArray;
    private concatDataResourceChain;
    private findStageItemArray;
    private processLastStageArray;
    private getLinkedObjectDataWithLinks;
    private getMandatoryVisitedId;
    private attributesResourceIdForIndex;
    private iterateThroughValues;
    private getValues;
    private formatAggregationValue;
}
export declare function mergeDataResourcesChains(dc1: DataResourceChain[][], dc2: DataResourceChain[][]): DataResourceChain[][];
